//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import type { Json, JsonObject } from './json';

/* tslint:disable */
/* eslin t-disable */
// ReSharper disable InconsistentNaming

export interface CoiCheckResult {
  noConflict?: boolean;
}

export interface ControlEventDto {
  status: ControlEventStatusDescription;
  fields: FormFieldValue[];
  transitions: ControlEventTransitionDto[];
  timestamp: string /*Date*/;
}

export interface ControlEventListDto extends JsonObject {
  id: string;
}
// export interface ControlEventListDto {
//   status: string;
//   stage: string;
//   number?: string;
//   name?: string;
//   administratorId: string;
//   curatorId?: string;
//   headId?: string;
//   headDepartmentId?: string;
//   checkDepartmentId?: string[];
//   reviewDepartmentId?: string;
//   prepareStartDate?: string /*Date*/;
//   prepareEndDate?: string /*Date*/;
//   startDate?: string /*Date*/;
//   endDate?: string /*Date*/;
//   planPoint?: string;
//   processMining?: string;
//   goal?: string;
//   functionalBlock?: string;
//   custmerJourney?: string[];
//   sprint?: string[];
//   risk?: string[];
//   esg?: string;
//   comment?: string;
//   parentId?: string;
// }

export interface ControlEventListDtoPagedResult {
  total: number;
  items: ControlEventListDto[];
}

export const enum ControlEventStage {
  Draft = 'Draft',
  Prepare = 'Prepare',
  Proceeding = 'Proceeding',
  Realization = 'Realization'
}

export const enum ControlEventStatus {
  Draft = 'Draft',
  Prepare_Registration = 'Prepare_Registration',
  Prepare_Registered = 'Prepare_Registered',
  Prepare_CheckConflictOfInterest = 'Prepare_CheckConflictOfInterest',
  Prepare_Completion = 'Prepare_Completion',
  Prepare_Completed = 'Prepare_Completed',
  Prepare_CompletedNoProceeding = 'Prepare_CompletedNoProceeding',
  Prepare_Archive = 'Prepare_Archive',
  Proceeding_Registration = 'Proceeding_Registration',
  Proceeding_Registered = 'Proceeding_Registered',
  Proceeding_CheckConflictOfInterest = 'Proceeding_CheckConflictOfInterest',
  Proceeding_PazCreate = 'Proceeding_PazCreate',
  Proceeding_PazNegotation = 'Proceeding_PazNegotation',
  Proceeding_PazApproved = 'Proceeding_PazApproved',
  Proceeding_PazCompleteion = 'Proceeding_PazCompleteion',
  Proceeding_PazCompleted = 'Proceeding_PazCompleted',
  Proceeding_Completion = 'Proceeding_Completion',
  Proceeding_Completed = 'Proceeding_Completed',
  Proceeding_CompletedNoRealization = 'Proceeding_CompletedNoRealization',
  Proceeding_Archive = 'Proceeding_Archive',
  Realization_Completion = 'Realization_Completion',
  Realization_Completed = 'Realization_Completed',
  Realization_Archive = 'Realization_Archive'
}

export interface ControlEventStatusDescription {
  stage: ControlEventStage;
  readonly stageDescription: string;
  status: ControlEventStatus;
  readonly description: string;
}

export interface ControlEventTransitionDto {
  label: string;
  goToStatus: ControlEventStatus;
  active: boolean;
  forward: boolean;
  note?: string;
}

export interface DirectoryContent {
  value: string;
  code: string;
  label: string;
  group?: string;
  parent?: string;
}

export interface DirectoryContentBatch { 
  batch: { [key: string]: DirectoryContent[] };
}

export interface DirectoryDescriptor {
  id: string;
  name: string;
  type: DirectoryType;
}

export const enum DirectoryType {
  Fixed = 'Fixed',
  Dynamic = 'Dynamic'
}

export interface DocumentDto {
  id: string;
  date: string /*Date*/;
  regNumber: string;
  url?: string;
}

export interface EditControlEventCommand {
  goToStatus?: ControlEventStatus;
  timestamp: string /*Date*/;
  values: JsonObject;
}

export const enum FieldType {
  Number = 'Number',
  String = 'String',
  Bool = 'Bool',
  Date = 'Date',
  Complex = 'Complex',
  Hidden = 'Hidden',
  Directory = 'Directory'
}

export interface FieldValidations {
  regExp?: string;
}

export interface FormFieldDescriptor {
  propDescriptor: PropertyDescriptor;
  edit: FormFieldEdit;
  children?: FormFieldDescriptor[];
}

export const enum FormFieldEdit {
  Readonly = 'Readonly',
  Editable = 'Editable',
  Required = 'Required',
  RequiredNew = 'RequiredNew'
}

export interface FormFieldValue {
  value?: Json;
  descriptor: FormFieldDescriptor;
}

export interface GetResultDocumentResponse {
  documnets: ResultDocumentsDto[];
  info: ResultDocumentInfo[];
}

export interface HttpValidationProblemDetails {
  type?: string;
  title?: string;
  status?: number;
  detail?: string;
  instance?: string;
  errors: { [key: string]: string[] };

  [key: string]: unknown;
}

export const enum PazAction {
  Negotation = 'Negotation',
  Approved = 'Approved',
  Completeion = 'Completeion',
  Completed = 'Completed'
}

export interface PropertyDescriptor {
  type: FieldType;
  id: string;
  title: string;
  description: string;
  readonly validations?: FieldValidations[];
  group: string;
  addButtonLabel?: string;
  valuesFrom?: string;
  directoryDescriptor?: DirectoryDescriptor;
  isCollection: boolean;
  readonly idPropertyName?: string;
}

export interface ResultDocumentInfo {
  type: ResultDocumentType;
  readonly isLinkedDocument: boolean;
  title: string;
  isMultiple: boolean;
  required: boolean;
  forceName: boolean;
  fileNameTemplate: string;
}

export const enum ResultDocumentType {
  ОРДподготовку = 'ОРДподготовку',
  ОРДпроведение = 'ОРДпроведение',
  ОРДпродление = 'ОРДпродление',
  Сопроводительная = 'Сопроводительная',
  Финальная = 'Финальная',
  Разделы = 'Разделы',
  Заключение = 'Заключение',
  Служебная = 'Служебная',
  Файлы = 'Файлы',
  АктВозражений = 'АктВозражений',
  ЗаключениеАктВозражений = 'ЗаключениеАктВозражений',
  АктОтказа = 'АктОтказа',
  АктПротиводействии = 'АктПротиводействии',
  Презентационные = 'Презентационные',
  Аудиторские = 'Аудиторские'
}

export interface ResultDocumentsDto {
  type: ResultDocumentType;
  id?: string;
  name?: string;
  content?: string;
  linkedDocument?: DocumentDto;
}

export interface FileParameter {
  data: unknown;
  fileName: string;
}
