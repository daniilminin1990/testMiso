@use "sass:color";

@function alpha-hex($hex, $alpha) {
  @return rgba(color.red($hex), color.green($hex), color.blue($hex), $alpha);
}

/**

Зачем нужен этот файл?
Назначение
Этот файл определяет пользовательскую функцию alpha-hex в Sass, которая преобразует hex-цвет (например, #FF5733) в эквивалентный цвет в формате rgba с заданной прозрачностью (alpha).

Входные параметры:
$hex: цвет в hex-формате (например, #FF5733 или #fff).
$alpha: значение прозрачности (число от 0 до 1, где 0 — полностью прозрачный, 1 — полностью непрозрачный).
Выход:
Функция возвращает цвет в формате rgba(red, green, blue, alpha), где red, green, и blue извлекаются из hex-цвета с помощью встроенных функций color.red(), color.green(), и color.blue() из модуля sass:color.

Пример использования
.example {
  background-color: alpha-hex(#FF5733, 0.5); // Результат: rgba(255, 87, 51, 0.5)
  color: alpha-hex(#000000, 0.8); // Результат: rgba(0, 0, 0, 0.8)
}

Зачем это нужно?
Упрощение работы с прозрачностью:
В CSS/Sass hex-цвета не поддерживают альфа-канал напрямую (например, #FF573380 — это нестандартный формат). Функция позволяет легко добавлять прозрачность к hex-цветам без необходимости вручную переводить их в RGB.
Повторное использование:
Если в проекте часто требуется применять прозрачность к hex-цветам, эта функция экономит время и делает код чище.
Интеграция с Sass:
Использование модуля sass:color позволяет работать с цветами на уровне Sass, что даёт больше гибкости, чем CSS-функции


Пример в контексте проекта
Предположим, у вас есть набор брендовых цветов в hex-формате, и вы хотите использовать их с разной прозрачностью (например, для теней, оверлеев или hover-эффектов). Вместо того чтобы каждый раз конвертировать цвета вручную, вы можете импортировать эту функцию и применять её:

@use "path/to/alpha-hex" as *;

.button {
  background: alpha-hex(#007bff, 0.9); // Основной цвет кнопки
  &:hover {
    background: alpha-hex(#007bff, 0.7); // Более прозрачный при наведении
  }
}
*/
