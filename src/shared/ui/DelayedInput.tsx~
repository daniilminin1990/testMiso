import * as styles from "./DelayedInput.module.scss";
import { useState, useEffect, useCallback } from "react";

// export type DelayedInputProps<TCanClear extends boolean> = {
//   inputProps: InputProps<TCanClear>;
//   onCommit: React.Dispatch<React.SetStateAction<string>>;
// };

// type Props = {
//   inputProps: InputProps;
//   onCommit: React.Dispatch<React.SetStateAction<string>>;
// };

type Props = {
  label?: string; // Добавляем label как отдельный пропс
  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
  onCommit: React.Dispatch<React.SetStateAction<string>>;
};

// Кастомная реализация debounce
const useDebounce = (callback: (value: string) => void, delay: number) => {
  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);

  const debouncedCallback = useCallback(
    (value: string) => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      const newTimeout = setTimeout(() => {
        callback(value);
      }, delay);
      setTimeoutId(newTimeout);
    },
    [callback, delay, timeoutId]
  );

  // Очистка при размонтировании
  useEffect(() => {
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [timeoutId]);

  return debouncedCallback;
};

// // TODO EDIT TCanClear это обобщение типа, можно было бы назвать просто T. С другой стороны а вообще зачеем тут дженерик?! Понимаю, если бы передавали canClear атрибут, но тут то нет...
// // Просто можно спредить все inputProps
// // export const DelayedInput = <TCanClear extends boolean>({ inputProps, onCommit }: DelayedInputProps<TCanClear>) => {
// // TODO EDIT лучше реализовать через создание простого Input от ui kit, а изменить state через debounce обычной функцией
// // Так получилось, что этот Input уникальный. А это лишний код.
// // Короче делаем просто debounce функцию и пихаем в Input от ui kit

// // TODO EDIT наименования useState нужно по правилам state, setState

// export const DelayedInput = (props: Props) => {
//   const { inputProps, onCommit } = props;
//   const [searchState, setVale] = useState("");

//   useEffect(() => {
//     const timer = setTimeout(() => {
//       onCommit(searchState);
//     }, 500);

//     return () => {
//       clearTimeout(timer);
//     };
//   }, [onCommit, searchState]);

//   return <Input {...inputProps} value={searchState} onChange={setVale} />;
// };

export const DelayedInput = ({ inputProps, onCommit, label }: Props) => {
  const [value, setValue] = useState("");

  // Используем наш кастомный хук debounce
  const debouncedOnCommit = useDebounce(onCommit, 500);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setValue(newValue);
    debouncedOnCommit(newValue);
  };

  return (
    <div className={styles.container}>
      {label && <label className={styles.label}>{label}</label>}
      <input {...inputProps} value={value} onChange={handleChange} type="text" className={styles.input} />
    </div>
  );
};
